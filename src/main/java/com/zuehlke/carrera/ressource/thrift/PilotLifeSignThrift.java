/**
 * Autogenerated by Thrift Compiler (0.9.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.zuehlke.carrera.ressource.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class PilotLifeSignThrift implements org.apache.thrift.TBase<PilotLifeSignThrift, PilotLifeSignThrift._Fields>, java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PilotLifeSignThrift");

    private static final org.apache.thrift.protocol.TField TEAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teamId", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField ACCESS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("accessCode", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField OPTIONAL_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("optionalUrl", org.apache.thrift.protocol.TType.STRING, (short) 3);
    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short) 4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new PilotLifeSignThriftStandardSchemeFactory());
        schemes.put(TupleScheme.class, new PilotLifeSignThriftTupleSchemeFactory());
    }

    public String teamId; // required
    public String accessCode; // required
    public String optionalUrl; // required
    public long timestamp; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        TEAM_ID((short) 1, "teamId"),
        ACCESS_CODE((short) 2, "accessCode"),
        OPTIONAL_URL((short) 3, "optionalUrl"),
        TIMESTAMP((short) 4, "timestamp");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // TEAM_ID
                    return TEAM_ID;
                case 2: // ACCESS_CODE
                    return ACCESS_CODE;
                case 3: // OPTIONAL_URL
                    return OPTIONAL_URL;
                case 4: // TIMESTAMP
                    return TIMESTAMP;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __TIMESTAMP_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.TEAM_ID, new org.apache.thrift.meta_data.FieldMetaData("teamId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "String")));
        tmpMap.put(_Fields.ACCESS_CODE, new org.apache.thrift.meta_data.FieldMetaData("accessCode", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "String")));
        tmpMap.put(_Fields.OPTIONAL_URL, new org.apache.thrift.meta_data.FieldMetaData("optionalUrl", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "String")));
        tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64, "long")));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PilotLifeSignThrift.class, metaDataMap);
    }

    public PilotLifeSignThrift() {
    }

    public PilotLifeSignThrift(
            String teamId,
            String accessCode,
            String optionalUrl,
            long timestamp) {
        this();
        this.teamId = teamId;
        this.accessCode = accessCode;
        this.optionalUrl = optionalUrl;
        this.timestamp = timestamp;
        setTimestampIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public PilotLifeSignThrift(PilotLifeSignThrift other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetTeamId()) {
            this.teamId = other.teamId;
        }
        if (other.isSetAccessCode()) {
            this.accessCode = other.accessCode;
        }
        if (other.isSetOptionalUrl()) {
            this.optionalUrl = other.optionalUrl;
        }
        this.timestamp = other.timestamp;
    }

    public PilotLifeSignThrift deepCopy() {
        return new PilotLifeSignThrift(this);
    }

    @Override
    public void clear() {
        this.teamId = null;
        this.accessCode = null;
        this.optionalUrl = null;
        setTimestampIsSet(false);
        this.timestamp = 0;
    }

    public String getTeamId() {
        return this.teamId;
    }

    public PilotLifeSignThrift setTeamId(String teamId) {
        this.teamId = teamId;
        return this;
    }

    public void unsetTeamId() {
        this.teamId = null;
    }

    /**
     * Returns true if field teamId is set (has been assigned a value) and false otherwise
     */
    public boolean isSetTeamId() {
        return this.teamId != null;
    }

    public void setTeamIdIsSet(boolean value) {
        if (!value) {
            this.teamId = null;
        }
    }

    public String getAccessCode() {
        return this.accessCode;
    }

    public PilotLifeSignThrift setAccessCode(String accessCode) {
        this.accessCode = accessCode;
        return this;
    }

    public void unsetAccessCode() {
        this.accessCode = null;
    }

    /**
     * Returns true if field accessCode is set (has been assigned a value) and false otherwise
     */
    public boolean isSetAccessCode() {
        return this.accessCode != null;
    }

    public void setAccessCodeIsSet(boolean value) {
        if (!value) {
            this.accessCode = null;
        }
    }

    public String getOptionalUrl() {
        return this.optionalUrl;
    }

    public PilotLifeSignThrift setOptionalUrl(String optionalUrl) {
        this.optionalUrl = optionalUrl;
        return this;
    }

    public void unsetOptionalUrl() {
        this.optionalUrl = null;
    }

    /**
     * Returns true if field optionalUrl is set (has been assigned a value) and false otherwise
     */
    public boolean isSetOptionalUrl() {
        return this.optionalUrl != null;
    }

    public void setOptionalUrlIsSet(boolean value) {
        if (!value) {
            this.optionalUrl = null;
        }
    }

    public long getTimestamp() {
        return this.timestamp;
    }

    public PilotLifeSignThrift setTimestamp(long timestamp) {
        this.timestamp = timestamp;
        setTimestampIsSet(true);
        return this;
    }

    public void unsetTimestamp() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    /**
     * Returns true if field timestamp is set (has been assigned a value) and false otherwise
     */
    public boolean isSetTimestamp() {
        return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    public void setTimestampIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case TEAM_ID:
                if (value == null) {
                    unsetTeamId();
                } else {
                    setTeamId((String) value);
                }
                break;

            case ACCESS_CODE:
                if (value == null) {
                    unsetAccessCode();
                } else {
                    setAccessCode((String) value);
                }
                break;

            case OPTIONAL_URL:
                if (value == null) {
                    unsetOptionalUrl();
                } else {
                    setOptionalUrl((String) value);
                }
                break;

            case TIMESTAMP:
                if (value == null) {
                    unsetTimestamp();
                } else {
                    setTimestamp((Long) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case TEAM_ID:
                return getTeamId();

            case ACCESS_CODE:
                return getAccessCode();

            case OPTIONAL_URL:
                return getOptionalUrl();

            case TIMESTAMP:
                return Long.valueOf(getTimestamp());

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case TEAM_ID:
                return isSetTeamId();
            case ACCESS_CODE:
                return isSetAccessCode();
            case OPTIONAL_URL:
                return isSetOptionalUrl();
            case TIMESTAMP:
                return isSetTimestamp();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof PilotLifeSignThrift)
            return this.equals((PilotLifeSignThrift) that);
        return false;
    }

    public boolean equals(PilotLifeSignThrift that) {
        if (that == null)
            return false;

        boolean this_present_teamId = true && this.isSetTeamId();
        boolean that_present_teamId = true && that.isSetTeamId();
        if (this_present_teamId || that_present_teamId) {
            if (!(this_present_teamId && that_present_teamId))
                return false;
            if (!this.teamId.equals(that.teamId))
                return false;
        }

        boolean this_present_accessCode = true && this.isSetAccessCode();
        boolean that_present_accessCode = true && that.isSetAccessCode();
        if (this_present_accessCode || that_present_accessCode) {
            if (!(this_present_accessCode && that_present_accessCode))
                return false;
            if (!this.accessCode.equals(that.accessCode))
                return false;
        }

        boolean this_present_optionalUrl = true && this.isSetOptionalUrl();
        boolean that_present_optionalUrl = true && that.isSetOptionalUrl();
        if (this_present_optionalUrl || that_present_optionalUrl) {
            if (!(this_present_optionalUrl && that_present_optionalUrl))
                return false;
            if (!this.optionalUrl.equals(that.optionalUrl))
                return false;
        }

        boolean this_present_timestamp = true;
        boolean that_present_timestamp = true;
        if (this_present_timestamp || that_present_timestamp) {
            if (!(this_present_timestamp && that_present_timestamp))
                return false;
            if (this.timestamp != that.timestamp)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(PilotLifeSignThrift other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        PilotLifeSignThrift typedOther = (PilotLifeSignThrift) other;

        lastComparison = Boolean.valueOf(isSetTeamId()).compareTo(typedOther.isSetTeamId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTeamId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamId, typedOther.teamId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetAccessCode()).compareTo(typedOther.isSetAccessCode());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAccessCode()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessCode, typedOther.accessCode);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetOptionalUrl()).compareTo(typedOther.isSetOptionalUrl());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetOptionalUrl()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optionalUrl, typedOther.optionalUrl);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTimestamp()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("PilotLifeSignThrift(");
        boolean first = true;

        sb.append("teamId:");
        if (this.teamId == null) {
            sb.append("null");
        } else {
            sb.append(this.teamId);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("accessCode:");
        if (this.accessCode == null) {
            sb.append("null");
        } else {
            sb.append(this.accessCode);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("optionalUrl:");
        if (this.optionalUrl == null) {
            sb.append("null");
        } else {
            sb.append(this.optionalUrl);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("timestamp:");
        sb.append(this.timestamp);
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class PilotLifeSignThriftStandardSchemeFactory implements SchemeFactory {
        public PilotLifeSignThriftStandardScheme getScheme() {
            return new PilotLifeSignThriftStandardScheme();
        }
    }

    private static class PilotLifeSignThriftStandardScheme extends StandardScheme<PilotLifeSignThrift> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, PilotLifeSignThrift struct) throws TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // TEAM_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.teamId = iprot.readString();
                            struct.setTeamIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // ACCESS_CODE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.accessCode = iprot.readString();
                            struct.setAccessCodeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // OPTIONAL_URL
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.optionalUrl = iprot.readString();
                            struct.setOptionalUrlIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // TIMESTAMP
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.timestamp = iprot.readI64();
                            struct.setTimestampIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, PilotLifeSignThrift struct) throws TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.teamId != null) {
                oprot.writeFieldBegin(TEAM_ID_FIELD_DESC);
                oprot.writeString(struct.teamId);
                oprot.writeFieldEnd();
            }
            if (struct.accessCode != null) {
                oprot.writeFieldBegin(ACCESS_CODE_FIELD_DESC);
                oprot.writeString(struct.accessCode);
                oprot.writeFieldEnd();
            }
            if (struct.optionalUrl != null) {
                oprot.writeFieldBegin(OPTIONAL_URL_FIELD_DESC);
                oprot.writeString(struct.optionalUrl);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
            oprot.writeI64(struct.timestamp);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class PilotLifeSignThriftTupleSchemeFactory implements SchemeFactory {
        public PilotLifeSignThriftTupleScheme getScheme() {
            return new PilotLifeSignThriftTupleScheme();
        }
    }

    private static class PilotLifeSignThriftTupleScheme extends TupleScheme<PilotLifeSignThrift> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, PilotLifeSignThrift struct) throws TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetTeamId()) {
                optionals.set(0);
            }
            if (struct.isSetAccessCode()) {
                optionals.set(1);
            }
            if (struct.isSetOptionalUrl()) {
                optionals.set(2);
            }
            if (struct.isSetTimestamp()) {
                optionals.set(3);
            }
            oprot.writeBitSet(optionals, 4);
            if (struct.isSetTeamId()) {
                oprot.writeString(struct.teamId);
            }
            if (struct.isSetAccessCode()) {
                oprot.writeString(struct.accessCode);
            }
            if (struct.isSetOptionalUrl()) {
                oprot.writeString(struct.optionalUrl);
            }
            if (struct.isSetTimestamp()) {
                oprot.writeI64(struct.timestamp);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, PilotLifeSignThrift struct) throws TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(4);
            if (incoming.get(0)) {
                struct.teamId = iprot.readString();
                struct.setTeamIdIsSet(true);
            }
            if (incoming.get(1)) {
                struct.accessCode = iprot.readString();
                struct.setAccessCodeIsSet(true);
            }
            if (incoming.get(2)) {
                struct.optionalUrl = iprot.readString();
                struct.setOptionalUrlIsSet(true);
            }
            if (incoming.get(3)) {
                struct.timestamp = iprot.readI64();
                struct.setTimestampIsSet(true);
            }
        }
    }

}

